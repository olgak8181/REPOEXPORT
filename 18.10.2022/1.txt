
document.createElement(tag) -- Создаёт новый элемент с заданным тегом


node.append(...nodes or strings) – добавляет узлы или строки в конец node,
node.prepend(...nodes or strings) -– вставляет узлы или строки в начало node,
node.before(...nodes or strings) –- вставляет узлы или строки до node,
node.after(...nodes or strings) –- вставляет узлы или строки после node,
node.replaceWith(...nodes or strings) –- заменяет node заданными узлами или строками.

innerHTML - внутреннее содержимое // скрипт так вставлять нельзя! не будет работать
outerHTML - внутреннее содержимое и сам тег

elem.insertAdjacentHTML(where, html)
where:
    "beforebegin" – вставить html непосредственно перед elem,
    "afterbegin" – вставить html в начало elem,
    "beforeend" – вставить html в конец elem,
    "afterend" – вставить html непосредственно после elem.
elem.insertAdjacentElement(where, elem)

elem.remove() - удаление

elem.cloneNode(true || false) -- копирование элемента. true - с копированием содержимого. по умолчанию false.

parentElem.appendChild(node)
parentElem.insertBefore(node, nextSibling)
parentElem.replaceChild(node, oldChild)
parentElem.removeChild(node)

document.write(...)



getComputedStyle(elem, pseudo)
elem.style

className
classList

elem.classList.add("class") – добавить класс.
elem.classList.remove("class") – удалить класс.
elem.classList.toggle("class") – добавить класс, если его нет, иначе удалить.
elem.classList.contains("class") – проверка наличия класса, возвращает true/false.

offsetParent – ближайший CSS-позиционированный родитель или ближайший td, th, table, body.
offsetLeft/offsetTop – позиция в пикселях верхнего левого угла относительно offsetParent.
offsetWidth/offsetHeight – «внешняя» ширина/высота элемента, включая рамки.
clientLeft/clientTop – расстояние от верхнего левого внешнего угла до внутренного. Для операционных систем с ориентацией слева-направо эти свойства равны ширинам левой/верхней рамки. Если язык ОС таков, что ориентация справа налево, так что вертикальная полоса прокрутки находится не справа, а слева, то clientLeft включает в своё значение её ширину.
clientWidth/clientHeight – ширина/высота содержимого вместе с внутренними отступами padding, но без полосы прокрутки.
scrollWidth/scrollHeight – ширины/высота содержимого, аналогично clientWidth/Height, но учитывают прокрученную, невидимую область элемента.
scrollLeft/scrollTop – ширина/высота прокрученной сверху части элемента, считается от верхнего левого угла.

в scrollLeft/scrollTop можно записывать!!!

elem.scrollIntoView(true || false) -- по умолчанию true.

Прокрутку окна можно получить так: window.pageYOffset/pageXOffset.
window.scrollTo(pageX,pageY) – абсолютные координаты,
window.scrollBy(x,y) – прокрутка относительно текущего места.

elem.getBoundingClientRect()



event - объект события. автоматически передается в функцию-обработчик

on... =
addEventListener(..., function...)

event.stopPropagation()             - отменяет всплытие. обработчики текущей ступени работают все.
event.stopImmediatePropagation()    - отменяет всплытие и все обработчики текущей ступени после себя. дефолтные обработчики работают.
event.preventDefault()              - отменяет дефолтные обработчики. все наши обработчики работают, всплытие идет.



